"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6771],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},76936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"AWS/aws-vpc-guide","title":"Mastering AWS VPCs: Complete Guide to Creation, Architecture, and Troubleshooting","description":"Comprehensive guide for DevOps engineers on AWS VPC creation, architecture, best practices, troubleshooting, and advanced features using Console, CLI, and CloudFormation.","source":"@site/docs/AWS/aws-vpc-guide.md","sourceDirName":"AWS","slug":"/AWS/aws-vpc-guide","permalink":"/blogs/docs/AWS/aws-vpc-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/AWS/aws-vpc-guide.md","tags":[{"inline":true,"label":"aws","permalink":"/blogs/docs/tags/aws"},{"inline":true,"label":"vpc","permalink":"/blogs/docs/tags/vpc"},{"inline":true,"label":"networking","permalink":"/blogs/docs/tags/networking"},{"inline":true,"label":"cloud","permalink":"/blogs/docs/tags/cloud"},{"inline":true,"label":"devops","permalink":"/blogs/docs/tags/devops"},{"inline":true,"label":"architecture","permalink":"/blogs/docs/tags/architecture"},{"inline":true,"label":"troubleshooting","permalink":"/blogs/docs/tags/troubleshooting"},{"inline":true,"label":"cloudformation","permalink":"/blogs/docs/tags/cloudformation"},{"inline":true,"label":"techsavvy","permalink":"/blogs/docs/tags/techsavvy"}],"version":"current","frontMatter":{"title":"Mastering AWS VPCs: Complete Guide to Creation, Architecture, and Troubleshooting","description":"Comprehensive guide for DevOps engineers on AWS VPC creation, architecture, best practices, troubleshooting, and advanced features using Console, CLI, and CloudFormation.","slug":"aws-vpc-guide","date":"2025-07-28T00:00:00.000Z","authors":["wiseagent"],"tags":["aws","vpc","networking","cloud","devops","architecture","troubleshooting","cloudformation","techsavvy"]},"sidebar":"WISeAgentSidebar","previous":{"title":"AWS Practitioner Certification","permalink":"/blogs/docs/AWS/AWS_Practitioner_Cert"},"next":{"title":"AWS","permalink":"/blogs/docs/AWS/"}}');var s=t(74848),r=t(28453);const o={title:"Mastering AWS VPCs: Complete Guide to Creation, Architecture, and Troubleshooting",description:"Comprehensive guide for DevOps engineers on AWS VPC creation, architecture, best practices, troubleshooting, and advanced features using Console, CLI, and CloudFormation.",slug:"aws-vpc-guide",date:new Date("2025-07-28T00:00:00.000Z"),authors:["wiseagent"],tags:["aws","vpc","networking","cloud","devops","architecture","troubleshooting","cloudformation","techsavvy"]},a="Mastering AWS VPCs: Complete Guide to Creation, Architecture, and Troubleshooting",l={},c=[{value:"AWS Tech Notes for DevOps Engineers",id:"aws-tech-notes-for-devops-engineers",level:2},{value:"Understanding VPC Fundamentals",id:"understanding-vpc-fundamentals",level:2},{value:"What is a VPC?",id:"what-is-a-vpc",level:3},{value:"CIDR Block Planning and Selection",id:"cidr-block-planning-and-selection",level:3},{value:"Choosing Your CIDR Range",id:"choosing-your-cidr-range",level:4},{value:"Key Planning Considerations",id:"key-planning-considerations",level:4},{value:"VPC Creation Methods",id:"vpc-creation-methods",level:2},{value:"AWS Management Console",id:"aws-management-console",level:3},{value:"AWS CLI",id:"aws-cli",level:3},{value:"Production-Ready VPC Architecture",id:"production-ready-vpc-architecture",level:2},{value:"Multi-AZ Public and Private Subnet Design",id:"multi-az-public-and-private-subnet-design",level:3},{value:"Understanding Route Tables",id:"understanding-route-tables",level:3},{value:"Complete CloudFormation Template",id:"complete-cloudformation-template",level:2},{value:"VPC Architecture Diagram",id:"vpc-architecture-diagram",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Network Access Control Lists (NACLs)",id:"network-access-control-lists-nacls",level:3},{value:"Security Groups",id:"security-groups",level:3},{value:"Example Security Group Configuration",id:"example-security-group-configuration",level:3},{value:"Advanced VPC Features",id:"advanced-vpc-features",level:2},{value:"VPC Endpoints",id:"vpc-endpoints",level:3},{value:"Cost Optimization",id:"cost-optimization",level:3},{value:"Comprehensive Troubleshooting Guide",id:"comprehensive-troubleshooting-guide",level:2},{value:"CloudFormation Stack Failures",id:"cloudformation-stack-failures",level:3},{value:"Console-Based Troubleshooting",id:"console-based-troubleshooting",level:4},{value:"CLI-Based Troubleshooting",id:"cli-based-troubleshooting",level:4},{value:"VPC Connectivity Issues",id:"vpc-connectivity-issues",level:3},{value:"Instances Can&#39;t Access Internet",id:"instances-cant-access-internet",level:4},{value:"NAT Gateway Not Working",id:"nat-gateway-not-working",level:4},{value:"VPC Flow Logs for Advanced Troubleshooting",id:"vpc-flow-logs-for-advanced-troubleshooting",level:3},{value:"Best Practices and Production Considerations",id:"best-practices-and-production-considerations",level:2},{value:"High Availability Design",id:"high-availability-design",level:3},{value:"Monitoring and Alerting",id:"monitoring-and-alerting",level:3},{value:"Tagging Strategy",id:"tagging-strategy",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mastering-aws-vpcs-complete-guide-to-creation-architecture-and-troubleshooting",children:"Mastering AWS VPCs: Complete Guide to Creation, Architecture, and Troubleshooting"})}),"\n",(0,s.jsx)(n.h2,{id:"aws-tech-notes-for-devops-engineers",children:"AWS Tech Notes for DevOps Engineers"}),"\n",(0,s.jsx)(n.p,{children:"The Virtual Private Cloud (VPC) is the cornerstone of AWS networking, providing a logically isolated virtual network where you can launch AWS resources with complete control over your network environment. This comprehensive guide covers VPC creation, best practices for subnet architecture, and advanced troubleshooting techniques using both the AWS Management Console and CLI."}),"\n",(0,s.jsx)(n.h2,{id:"understanding-vpc-fundamentals",children:"Understanding VPC Fundamentals"}),"\n",(0,s.jsx)(n.h3,{id:"what-is-a-vpc",children:"What is a VPC?"}),"\n",(0,s.jsx)(n.p,{children:"A VPC is your private network in the AWS cloud, offering:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complete network isolation"})," from other AWS accounts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Full control"})," over IP addressing, subnets, route tables, and network gateways"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Customisable security"})," through security groups and Network Access Control Lists (NACLs)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexible connectivity"})," options to the internet, other VPCs, and on-premises networks"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cidr-block-planning-and-selection",children:"CIDR Block Planning and Selection"}),"\n",(0,s.jsxs)(n.p,{children:["When designing your VPC, careful CIDR planning is crucial for scalability and network integration. AWS supports IPv4 CIDR blocks from ",(0,s.jsx)(n.code,{children:"/16"})," (65,536 addresses) to ",(0,s.jsx)(n.code,{children:"/28"})," (16 addresses)."]}),"\n",(0,s.jsx)(n.h4,{id:"choosing-your-cidr-range",children:"Choosing Your CIDR Range"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Avoid Common Ranges"}),": Don't use obvious defaults like ",(0,s.jsx)(n.code,{children:"10.0.0.0/16"})," or ",(0,s.jsx)(n.code,{children:"192.168.1.0/24"})," as they frequently conflict with:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Home and corporate networks"}),"\n",(0,s.jsx)(n.li,{children:"Existing cloud environments"}),"\n",(0,s.jsx)(n.li,{children:"VPN configurations"}),"\n",(0,s.jsx)(n.li,{children:"On-premises infrastructure"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Better CIDR Selection Strategy:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use specific ranges"}),": ",(0,s.jsx)(n.code,{children:"10.23.0.0/16"}),", ",(0,s.jsx)(n.code,{children:"10.47.0.0/16"}),", or ",(0,s.jsx)(n.code,{children:"10.100.0.0/16"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Align with organizational IP plans"}),": Reserve ranges for different environments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consider future connectivity"}),": Plan for VPC peering, VPN, and Direct Connect"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"key-planning-considerations",children:"Key Planning Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Plan for growth"}),": Choose appropriate block size based on projected needs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Avoid overlaps"}),": Ensure your CIDR doesn't conflict with existing networks or future expansion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reserve space"}),": AWS reserves 5 IP addresses per subnet (first 4 and last 1)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multiple AZs"}),": Plan subnets across multiple Availability Zones for high availability"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Environment separation"}),": Use different CIDR ranges for prod/staging/dev"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Recommended CIDR Allocation Strategy:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"VPC: 10.23.0.0/16 (65,536 addresses)\n\u251c\u2500\u2500 Public Subnet AZ-A: 10.23.1.0/24 (256 addresses, 251 usable)\n\u251c\u2500\u2500 Private Subnet AZ-A: 10.23.2.0/24 (256 addresses, 251 usable)\n\u251c\u2500\u2500 Public Subnet AZ-B: 10.23.3.0/24 (256 addresses, 251 usable)\n\u251c\u2500\u2500 Private Subnet AZ-B: 10.23.4.0/24 (256 addresses, 251 usable)\n\u2514\u2500\u2500 Database Subnet AZ-A: 10.23.5.0/24 (256 addresses, 251 usable)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Alternative Sizing for Different Use Cases:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Small Application (/20 - 4,096 addresses):\nVPC: 10.23.0.0/20\n\u251c\u2500\u2500 Allows 16 /24 subnets\n\u2514\u2500\u2500 Expandable with secondary CIDR blocks\n\nEnterprise Multi-Environment:\n\u251c\u2500\u2500 Production: 10.20.0.0/16\n\u251c\u2500\u2500 Staging: 10.21.0.0/16  \n\u251c\u2500\u2500 Development: 10.22.0.0/16\n\u2514\u2500\u2500 Sandbox: 10.23.0.0/16\n"})}),"\n",(0,s.jsx)(n.h2,{id:"vpc-creation-methods",children:"VPC Creation Methods"}),"\n",(0,s.jsx)(n.h3,{id:"aws-management-console",children:"AWS Management Console"}),"\n",(0,s.jsx)(n.p,{children:"The console provides a user-friendly, wizard-driven approach:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Navigate"}),' to VPC service \u2192 "Create VPC"']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choose"}),' "VPC and more" for automated subnet creation, or "VPC only" for manual control']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configure"})," essential parameters:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Name"}),": Descriptive name (e.g., ",(0,s.jsx)(n.code,{children:"production-vpc"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IPv4 CIDR"}),": Private IP range (e.g., ",(0,s.jsx)(n.code,{children:"10.0.0.0/16"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IPv6 CIDR"}),": Optional, for future-proofing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tenancy"}),": Default (shared hardware) vs. Dedicated (isolated hardware)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pro Tip"}),': Use the "VPC and more" option to automatically create subnets, route tables, and internet gateway in a single step.']}),"\n",(0,s.jsx)(n.h3,{id:"aws-cli",children:"AWS CLI"}),"\n",(0,s.jsx)(n.p,{children:"For Infrastructure as Code and automation, the CLI provides precise control:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create the VPC with intentionally chosen CIDR range\naws ec2 create-vpc \\\n    --cidr-block 10.23.0.0/16 \\\n    --tag-specifications 'ResourceType=vpc,Tags=[{Key=Name,Value=production-vpc}]'\n\n# Enable DNS resolution and hostnames\naws ec2 modify-vpc-attribute --vpc-id vpc-12345678 --enable-dns-support\naws ec2 modify-vpc-attribute --vpc-id vpc-12345678 --enable-dns-hostnames\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": Use double quotes for Windows PowerShell compatibility, or escape properly for your shell environment."]}),"\n",(0,s.jsx)(n.h2,{id:"production-ready-vpc-architecture",children:"Production-Ready VPC Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"multi-az-public-and-private-subnet-design",children:"Multi-AZ Public and Private Subnet Design"}),"\n",(0,s.jsx)(n.p,{children:"A robust VPC architecture includes redundancy across multiple Availability Zones:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Public subnets"}),": Host internet-facing resources (load balancers, bastion hosts, NAT gateways)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Private subnets"}),": Host application servers, microservices, and other internal resources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database subnets"}),": Isolate data tier with additional security controls"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"understanding-route-tables",children:"Understanding Route Tables"}),"\n",(0,s.jsx)(n.p,{children:"Route tables are the traffic directors of your VPC:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Local route"}),": Automatically created for intra-VPC communication (e.g., ",(0,s.jsx)(n.code,{children:"10.0.0.0/16 \u2192 local"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Internet route"}),": Directs traffic to Internet Gateway (e.g., ",(0,s.jsx)(n.code,{children:"0.0.0.0/0 \u2192 igw-12345"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NAT route"}),": Directs private subnet traffic through NAT Gateway (e.g., ",(0,s.jsx)(n.code,{children:"0.0.0.0/0 \u2192 nat-12345"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each subnet can only be associated with one route table, but one route table can serve multiple subnets."}),"\n",(0,s.jsx)(n.h2,{id:"complete-cloudformation-template",children:"Complete CloudFormation Template"}),"\n",(0,s.jsx)(n.p,{children:"This production-ready template creates a VPC with multi-AZ architecture, proper routing, and essential security components:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"AWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Production VPC with multi-AZ public/private subnets, NAT Gateway, and security components'\n\nParameters:\n  VPCCidr:\n    Description: CIDR block for VPC\n    Type: String\n    Default: 10.23.0.0/16\n    \n  EnvironmentName:\n    Description: Environment name prefix for resources\n    Type: String\n    Default: production\n\nResources:\n  # VPC with DNS support enabled\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Ref VPCCidr\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-vpc\n\n  # Internet Gateway for public internet access\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-igw\n\n  # Attach Internet Gateway to VPC\n  InternetGatewayAttachment:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      InternetGatewayId: !Ref InternetGateway\n      VpcId: !Ref VPC\n\n  # Public Subnet in AZ-A\n  PublicSubnet1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [0, !GetAZs '']\n      CidrBlock: 10.23.1.0/24\n      MapPublicIpOnLaunch: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-public-subnet-az1\n\n  # Public Subnet in AZ-B\n  PublicSubnet2:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [1, !GetAZs '']\n      CidrBlock: 10.23.3.0/24\n      MapPublicIpOnLaunch: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-public-subnet-az2\n\n  # Private Subnet in AZ-A\n  PrivateSubnet1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [0, !GetAZs '']\n      CidrBlock: 10.23.2.0/24\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-private-subnet-az1\n\n  # Private Subnet in AZ-B\n  PrivateSubnet2:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [1, !GetAZs '']\n      CidrBlock: 10.23.4.0/24\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-private-subnet-az2\n\n  # Elastic IP for NAT Gateway\n  NatGateway1EIP:\n    Type: AWS::EC2::EIP\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      Domain: vpc\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-nat-gw-eip\n\n  # NAT Gateway for private subnet internet access\n  NatGateway1:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt NatGateway1EIP.AllocationId\n      SubnetId: !Ref PublicSubnet1\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-nat-gw\n\n  # Route table for public subnets\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-public-routes\n\n  # Route table for private subnets\n  PrivateRouteTable1:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-private-routes-az1\n\n  # Default route for public subnets to Internet Gateway\n  DefaultPublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n\n  # Default route for private subnets to NAT Gateway\n  DefaultPrivateRoute1:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGateway1\n\n  # Associate public subnets with public route table\n  PublicSubnet1RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      SubnetId: !Ref PublicSubnet1\n\n  PublicSubnet2RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      SubnetId: !Ref PublicSubnet2\n\n  # Associate private subnets with private route table\n  PrivateSubnet1RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1\n      SubnetId: !Ref PrivateSubnet1\n\n  PrivateSubnet2RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1\n      SubnetId: !Ref PrivateSubnet2\n\n  # Default Security Group (automatically created, but explicitly referenced)\n  DefaultSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Default security group for VPC\n      VpcId: !Ref VPC\n      SecurityGroupIngress:\n        - IpProtocol: -1\n          SourceSecurityGroupId: !Ref 'AWS::NoValue'\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-default-sg\n\nOutputs:\n  VPC:\n    Description: VPC ID\n    Value: !Ref VPC\n    Export:\n      Name: !Sub ${EnvironmentName}-VPC-ID\n\n  PublicSubnets:\n    Description: Public subnet IDs\n    Value: !Join [\",\", [!Ref PublicSubnet1, !Ref PublicSubnet2]]\n    Export:\n      Name: !Sub ${EnvironmentName}-Public-Subnets\n\n  PrivateSubnets:\n    Description: Private subnet IDs  \n    Value: !Join [\",\", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]\n    Export:\n      Name: !Sub ${EnvironmentName}-Private-Subnets\n"})}),"\n",(0,s.jsx)(n.h2,{id:"vpc-architecture-diagram",children:"VPC Architecture Diagram"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TB\n    Internet[Internet]\n    \n    subgraph VPC["VPC (10.23.0.0/16)"]\n        IGW[Internet Gateway]\n        \n        subgraph AZ1["Availability Zone A"]\n            PubSub1["Public Subnet<br/>10.23.1.0/24"]\n            PrivSub1["Private Subnet<br/>10.23.2.0/24"]\n            NAT[NAT Gateway]\n        end\n        \n        subgraph AZ2["Availability Zone B"]\n            PubSub2["Public Subnet<br/>10.23.3.0/24"]\n            PrivSub2["Private Subnet<br/>10.23.4.0/24"]\n        end\n        \n        PubRT[Public Route Table]\n        PrivRT[Private Route Table]\n    end\n    \n    Internet --\x3e IGW\n    IGW --\x3e PubSub1\n    IGW --\x3e PubSub2\n    PubSub1 --\x3e NAT\n    NAT --\x3e PrivSub1\n    NAT --\x3e PrivSub2\n    \n    PubRT -.-> PubSub1\n    PubRT -.-> PubSub2\n    PrivRT -.-> PrivSub1\n    PrivRT -.-> PrivSub2\n    \n    style VPC fill:#e1f5fe\n    style AZ1 fill:#f3e5f5\n    style AZ2 fill:#f3e5f5'}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"network-access-control-lists-nacls",children:"Network Access Control Lists (NACLs)"}),"\n",(0,s.jsx)(n.p,{children:"NACLs provide subnet-level security with stateless rules:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default NACL"}),": Allows all inbound and outbound traffic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom NACLs"}),": Should follow principle of least privilege"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rule evaluation"}),": Processed in numerical order, lowest number first"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"security-groups",children:"Security Groups"}),"\n",(0,s.jsx)(n.p,{children:"Security groups provide instance-level security with stateful rules:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default behaviour"}),": Deny all inbound, allow all outbound"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stateful"}),": Return traffic automatically allowed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Best practice"}),": Create specific security groups for each application tier"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-security-group-configuration",children:"Example Security Group Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Web tier security group (public subnet)\naws ec2 create-security-group \\\n    --group-name web-tier-sg \\\n    --description "Security group for web servers" \\\n    --vpc-id vpc-12345678\n\n# Allow HTTP and HTTPS from anywhere\naws ec2 authorize-security-group-ingress \\\n    --group-id sg-web12345 \\\n    --protocol tcp \\\n    --port 80 \\\n    --cidr 0.0.0.0/0\n\naws ec2 authorize-security-group-ingress \\\n    --group-id sg-web12345 \\\n    --protocol tcp \\\n    --port 443 \\\n    --cidr 0.0.0.0/0\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-vpc-features",children:"Advanced VPC Features"}),"\n",(0,s.jsx)(n.h3,{id:"vpc-endpoints",children:"VPC Endpoints"}),"\n",(0,s.jsx)(n.p,{children:"Reduce NAT Gateway costs and improve security by using VPC endpoints for AWS services:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# S3 Gateway Endpoint (no charge)\nS3Endpoint:\n  Type: AWS::EC2::VPCEndpoint\n  Properties:\n    VpcId: !Ref VPC\n    ServiceName: !Sub com.amazonaws.${AWS::Region}.s3\n    VpcEndpointType: Gateway\n    RouteTableIds:\n      - !Ref PrivateRouteTable1\n\n# Interface Endpoint for EC2 API (charges apply)\nEC2Endpoint:\n  Type: AWS::EC2::VPCEndpoint\n  Properties:\n    VpcId: !Ref VPC\n    ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2\n    VpcEndpointType: Interface\n    SubnetIds:\n      - !Ref PrivateSubnet1\n      - !Ref PrivateSubnet2\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cost-optimization",children:"Cost Optimization"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NAT Gateway Considerations:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Charges"}),": $0.045/hour + $0.045/GB data processed (us-east-1 pricing)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Alternative"}),": NAT Instance for lower traffic workloads (manage your own EC2 instance)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimization"}),": Use VPC endpoints to avoid NAT Gateway for AWS service traffic"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"comprehensive-troubleshooting-guide",children:"Comprehensive Troubleshooting Guide"}),"\n",(0,s.jsx)(n.h3,{id:"cloudformation-stack-failures",children:"CloudFormation Stack Failures"}),"\n",(0,s.jsx)(n.p,{children:"When your VPC CloudFormation deployment fails, follow this systematic approach:"}),"\n",(0,s.jsx)(n.h4,{id:"console-based-troubleshooting",children:"Console-Based Troubleshooting"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Navigate to CloudFormation"})," \u2192 Select your failed stack"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check Stack Status"}),": Look for ",(0,s.jsx)(n.code,{children:"CREATE_FAILED"}),", ",(0,s.jsx)(n.code,{children:"UPDATE_FAILED"}),", or ",(0,s.jsx)(n.code,{children:"ROLLBACK_COMPLETE"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Examine Events Tab"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sort by timestamp to find the first failure"}),"\n",(0,s.jsxs)(n.li,{children:["Look for resources with ",(0,s.jsx)(n.code,{children:"CREATE_FAILED"})," status"]}),"\n",(0,s.jsx)(n.li,{children:'Read the "Status reason" for specific error details'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common Error Messages and Solutions:"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Error"}),(0,s.jsx)(n.th,{children:"Likely Cause"}),(0,s.jsx)(n.th,{children:"Solution"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"The CIDR '10.0.0.0/16' conflicts with another subnet"})}),(0,s.jsx)(n.td,{children:"CIDR overlap"}),(0,s.jsx)(n.td,{children:"Choose non-overlapping CIDR blocks"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Internet Gateway limit exceeded"})}),(0,s.jsx)(n.td,{children:"Too many IGWs in region"}),(0,s.jsx)(n.td,{children:"Delete unused IGWs or request limit increase"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"InvalidSubnet: The subnet ID 'subnet-12345' does not exist"})}),(0,s.jsx)(n.td,{children:"Dependency issue"}),(0,s.jsx)(n.td,{children:"Check subnet creation succeeded first"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DependencyViolation: Gateway has dependent resources"})}),(0,s.jsx)(n.td,{children:"Resource dependencies"}),(0,s.jsx)(n.td,{children:"Delete dependent resources before gateway"})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"cli-based-troubleshooting",children:"CLI-Based Troubleshooting"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check overall stack status\naws cloudformation describe-stacks \\\n    --stack-name production-vpc-stack \\\n    --query 'Stacks[0].{Status:StackStatus,Reason:StackStatusReason}'\n\n# Get detailed failure events\naws cloudformation describe-stack-events \\\n    --stack-name production-vpc-stack \\\n    --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`]'\n\n# List all stack resources and their status\naws cloudformation describe-stack-resources \\\n    --stack-name production-vpc-stack \\\n    --query 'StackResources[*].{LogicalId:LogicalResourceId,Type:ResourceType,Status:ResourceStatus}'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"vpc-connectivity-issues",children:"VPC Connectivity Issues"}),"\n",(0,s.jsx)(n.h4,{id:"instances-cant-access-internet",children:"Instances Can't Access Internet"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Diagnostic Steps:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Verify route table"}),": Ensure ",(0,s.jsx)(n.code,{children:"0.0.0.0/0"})," points to Internet Gateway (public) or NAT Gateway (private)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check security groups"}),": Confirm outbound rules allow desired traffic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validate NACLs"}),": Ensure subnet-level rules permit traffic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test DNS resolution"}),": Verify DNS settings are enabled on VPC"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check route table for a subnet\naws ec2 describe-route-tables \\\n    --filters \"Name=association.subnet-id,Values=subnet-12345678\" \\\n    --query 'RouteTables[0].Routes'\n\n# Verify security group rules\naws ec2 describe-security-groups \\\n    --group-ids sg-12345678 \\\n    --query 'SecurityGroups[0].{Ingress:IpPermissions,Egress:IpPermissionsEgress}'\n"})}),"\n",(0,s.jsx)(n.h4,{id:"nat-gateway-not-working",children:"NAT Gateway Not Working"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common Issues:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"NAT Gateway not in public subnet"}),"\n",(0,s.jsx)(n.li,{children:"Private route table doesn't point to NAT Gateway"}),"\n",(0,s.jsx)(n.li,{children:"Security groups blocking traffic"}),"\n",(0,s.jsx)(n.li,{children:"Source/destination check enabled on instances (for NAT instances)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Verification Commands:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check NAT Gateway status and location\naws ec2 describe-nat-gateways \\\n    --nat-gateway-ids nat-12345678 \\\n    --query 'NatGateways[0].{State:State,SubnetId:SubnetId,PublicIp:NatGatewayAddresses[0].PublicIp}'\n\n# Verify private subnet routing\naws ec2 describe-route-tables \\\n    --filters \"Name=association.subnet-id,Values=subnet-private123\" \\\n    --query 'RouteTables[0].Routes[?DestinationCidrBlock==`0.0.0.0/0`]'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"vpc-flow-logs-for-advanced-troubleshooting",children:"VPC Flow Logs for Advanced Troubleshooting"}),"\n",(0,s.jsx)(n.p,{children:"Enable VPC Flow Logs to capture network traffic information:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create flow log for entire VPC\naws ec2 create-flow-logs \\\n    --resource-type VPC \\\n    --resource-ids vpc-12345678 \\\n    --traffic-type ALL \\\n    --log-destination-type cloud-watch-logs \\\n    --log-group-name VPCFlowLogs\n"})}),"\n",(0,s.jsx)(n.p,{children:"Flow logs help identify:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Rejected connections (security group/NACL blocks)"}),"\n",(0,s.jsx)(n.li,{children:"Traffic patterns and volume"}),"\n",(0,s.jsx)(n.li,{children:"Potential security threats"}),"\n",(0,s.jsx)(n.li,{children:"Route table misconfigurations"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-and-production-considerations",children:"Best Practices and Production Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"high-availability-design",children:"High Availability Design"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi-AZ deployment"}),": Spread subnets across at least 2 AZs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redundant NAT Gateways"}),": Deploy one per AZ for fault tolerance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cross-AZ load balancing"}),": Use Application Load Balancers across AZs"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"monitoring-and-alerting",children:"Monitoring and Alerting"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"VPC Flow Logs"}),": Enable for security and troubleshooting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CloudWatch Metrics"}),": Monitor NAT Gateway metrics for performance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AWS Config"}),": Track VPC configuration changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AWS CloudTrail"}),": Audit API calls affecting VPC resources"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"tagging-strategy",children:"Tagging Strategy"}),"\n",(0,s.jsx)(n.p,{children:"Implement consistent tagging for cost allocation and management:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Tags:\n  - Key: Environment\n    Value: production\n  - Key: Project\n    Value: web-app\n  - Key: CostCenter\n    Value: engineering\n  - Key: Owner\n    Value: devops-team\n"})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Mastering VPCs requires understanding both the foundational concepts and the practical implementation details. By following the architectural patterns and troubleshooting approaches outlined in this guide, you'll be equipped to design, deploy, and maintain robust, secure, and cost-effective VPC infrastructures that scale with your organization's needs."}),"\n",(0,s.jsx)(n.p,{children:"Remember that VPC design is often a one-time decision that's difficult to change later, so invest time in proper planning and consider future requirements when designing your network architecture."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);