"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9572],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var r=i(96540);const a={},s=r.createContext(a);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(s.Provider,{value:n},e.children)}},44979:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"TechSavvy/mermaid-language-guide","title":"Ditch Static Images \u2013 Embed Live Diagrams Directly in Your Markdown with Mermaid.js","description":"A practical guide to using Mermaid.js for live, version-controlled diagrams in Markdown\u2014no more outdated screenshots or broken image links.","source":"@site/docs/TechSavvy/mermaid-language-guide.md","sourceDirName":"TechSavvy","slug":"/TechSavvy/mermaid-language-guide","permalink":"/blogs/docs/TechSavvy/mermaid-language-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/TechSavvy/mermaid-language-guide.md","tags":[{"inline":true,"label":"mermaid","permalink":"/blogs/docs/tags/mermaid"},{"inline":true,"label":"diagrams","permalink":"/blogs/docs/tags/diagrams"},{"inline":true,"label":"markdown","permalink":"/blogs/docs/tags/markdown"},{"inline":true,"label":"documentation","permalink":"/blogs/docs/tags/documentation"},{"inline":true,"label":"visualization","permalink":"/blogs/docs/tags/visualization"},{"inline":true,"label":"techsavvy","permalink":"/blogs/docs/tags/techsavvy"}],"version":"current","frontMatter":{"title":"Ditch Static Images \u2013 Embed Live Diagrams Directly in Your Markdown with Mermaid.js","description":"A practical guide to using Mermaid.js for live, version-controlled diagrams in Markdown\u2014no more outdated screenshots or broken image links.","slug":"mermaid-language-guide","date":"2025-07-28T00:00:00.000Z","authors":["wiseagent"],"tags":["mermaid","diagrams","markdown","documentation","visualization","techsavvy"]},"sidebar":"tutorialSidebar","previous":{"title":"Tech Savvy","permalink":"/blogs/docs/TechSavvy"},"next":{"title":"AWS","permalink":"/blogs/docs/category/aws"}}');var a=i(74848),s=i(28453);const t={title:"Ditch Static Images \u2013 Embed Live Diagrams Directly in Your Markdown with Mermaid.js",description:"A practical guide to using Mermaid.js for live, version-controlled diagrams in Markdown\u2014no more outdated screenshots or broken image links.",slug:"mermaid-language-guide",date:new Date("2025-07-28T00:00:00.000Z"),authors:["wiseagent"],tags:["mermaid","diagrams","markdown","documentation","visualization","techsavvy"]},d="Ditch Static Images \u2013 Embed Live Diagrams Directly in Your Markdown with Mermaid.js",o={},l=[{value:"\ud83e\udde0 TL;DR - Live Diagrams Beat Static Images",id:"-tldr---live-diagrams-beat-static-images",level:2},{value:"\ud83c\udfaf Why Embedded Mermaid Beats Image Files",id:"-why-embedded-mermaid-beats-image-files",level:2},{value:"\ud83d\ude80 Start Here: 30 Seconds to Your First Embedded Diagram",id:"-start-here-30-seconds-to-your-first-embedded-diagram",level:2},{value:"\ud83d\udcca Choose Your Diagram Type",id:"-choose-your-diagram-type",level:2},{value:"\ud83c\udfd7\ufe0f Master the Fundamentals",id:"\ufe0f-master-the-fundamentals",level:2},{value:"Layout Direction - Changes Everything",id:"layout-direction---changes-everything",level:3},{value:"Node Shapes - Visual Language That Works",id:"node-shapes---visual-language-that-works",level:3},{value:"Connections That Communicate",id:"connections-that-communicate",level:3},{value:"\ud83c\udfa8 Make It Professional",id:"-make-it-professional",level:2},{value:"Smart Styling",id:"smart-styling",level:3},{value:"Subgraphs - Organize Complex Systems",id:"subgraphs---organize-complex-systems",level:3},{value:"\ud83d\udca1 Real-World Examples That Work",id:"-real-world-examples-that-work",level:2},{value:"System Architecture",id:"system-architecture",level:3},{value:"API Flow Documentation",id:"api-flow-documentation",level:3},{value:"\u26a1 Implementation Guide",id:"-implementation-guide",level:2},{value:"GitHub/GitLab (Most Common)",id:"githubgitlab-most-common",level:3},{value:"From Image Files to Embedded Diagrams",id:"from-image-files-to-embedded-diagrams",level:3},{value:"\u26a1 Where Your Embedded Diagrams Work",id:"-where-your-embedded-diagrams-work",level:2},{value:"\ud83d\udea8 Common Gotchas to Avoid",id:"-common-gotchas-to-avoid",level:2},{value:"Syntax Errors That Break Everything",id:"syntax-errors-that-break-everything",level:3},{value:"Performance Issues",id:"performance-issues",level:3},{value:"Platform Differences",id:"platform-differences",level:3},{value:"\ud83c\udfaf Best Practices for Teams",id:"-best-practices-for-teams",level:2},{value:"\ud83c\udfaf Best Practices for Embedded Diagrams",id:"-best-practices-for-embedded-diagrams",level:2},{value:"Keep It Simple for Readability",id:"keep-it-simple-for-readability",level:3},{value:"Organize Complex Systems with Multiple Diagrams",id:"organize-complex-systems-with-multiple-diagrams",level:3},{value:"Maintain Consistency",id:"maintain-consistency",level:3},{value:"\ud83c\udfc6 The Embedded Diagram Advantage",id:"-the-embedded-diagram-advantage",level:2},{value:"\ud83d\udd25 Advanced Patterns",id:"-advanced-patterns",level:2},{value:"Clickable Interactive Diagrams",id:"clickable-interactive-diagrams",level:3},{value:"Dynamic Content Generation",id:"dynamic-content-generation",level:3},{value:"Integration with Documentation Generation",id:"integration-with-documentation-generation",level:3},{value:"\ud83c\udfaf Action Steps",id:"-action-steps",level:2},{value:"\ud83c\udfc6 Success Metrics",id:"-success-metrics",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"ditch-static-images--embed-live-diagrams-directly-in-your-markdown-with-mermaidjs",children:"Ditch Static Images \u2013 Embed Live Diagrams Directly in Your Markdown with Mermaid.js"})}),"\n",(0,a.jsx)(n.h2,{id:"-tldr---live-diagrams-beat-static-images",children:"\ud83e\udde0 TL;DR - Live Diagrams Beat Static Images"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart LR\n    A[Write text in markdown] --\x3e B[Renders as live diagram]\n    B --\x3e C[Updates automatically with code]\n    C --\x3e D[Never goes stale]\n    D --\x3e A"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"The transformation:"})," From screenshots that break to diagrams that live in your documentation and update with your changes."]}),"\n",(0,a.jsx)(n.h2,{id:"-why-embedded-mermaid-beats-image-files",children:"\ud83c\udfaf Why Embedded Mermaid Beats Image Files"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"The old way:"})," Export from Figma \u2192 Upload image \u2192 Link breaks \u2192 Diagram outdated \u2192 Repeat"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"The new way:"})," Write text \u2192 Renders everywhere \u2192 Always current \u2192 Version controlled"]}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart TD\n    A[Static PNG/SVG Images] --\x3e B[\u274c Get outdated]\n    A --\x3e C[\u274c Break when moved] \n    A --\x3e D[\u274c Not searchable]\n    A --\x3e E[\u274c Hard to edit]\n    \n    F[Embedded Mermaid] --\x3e G[\u2705 Always current]\n    F --\x3e H[\u2705 Live in markdown]\n    F --\x3e I[\u2705 Searchable text]\n    F --\x3e J[\u2705 Easy to update]"}),"\n",(0,a.jsx)(n.h2,{id:"-start-here-30-seconds-to-your-first-embedded-diagram",children:"\ud83d\ude80 Start Here: 30 Seconds to Your First Embedded Diagram"}),"\n",(0,a.jsxs)(n.p,{children:["Instead of adding ",(0,a.jsx)(n.code,{children:"![diagram](./images/flow.png)"})," to your markdown, just write:"]}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart TD\n    Start([User opens app]) --\x3e Auth{Authenticated?}\n    Auth --\x3e|Yes| Dashboard[Show dashboard]\n    Auth --\x3e|No| Login[Show login]\n    Login --\x3e Auth"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Result:"})," Live, interactive diagram that renders directly in your markdown. No image files to manage, no broken links, no manual updates."]}),"\n",(0,a.jsx)(n.h2,{id:"-choose-your-diagram-type",children:"\ud83d\udcca Choose Your Diagram Type"}),"\n",(0,a.jsx)(n.p,{children:"Different problems need different diagrams:"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart TD\n    A[What are you documenting?] --\x3e B{Type of documentation}\n    B --\x3e|System flow| C[flowchart TD]\n    B --\x3e|API calls| D[sequenceDiagram]\n    B --\x3e|Project timeline| E[gantt]\n    B --\x3e|Data relationships| F[erDiagram]\n    B --\x3e|Code structure| G[classDiagram]\n    \n    C --\x3e H[Perfect for: Architecture, user flows, process diagrams]\n    D --\x3e I[Perfect for: API docs, service communication]\n    E --\x3e J[Perfect for: Project planning, roadmap]\n    F --\x3e K[Perfect for: Database schemas, data models]\n    G --\x3e L[Perfect for: Code documentation, inheritance]"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Quick decision guide:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Showing a process or system? \u2192 ",(0,a.jsx)(n.code,{children:"flowchart"})]}),"\n",(0,a.jsxs)(n.li,{children:["Documenting API interactions? \u2192 ",(0,a.jsx)(n.code,{children:"sequenceDiagram"})]}),"\n",(0,a.jsxs)(n.li,{children:["Planning project phases? \u2192 ",(0,a.jsx)(n.code,{children:"gantt"})]}),"\n",(0,a.jsxs)(n.li,{children:["Modelling data relationships? \u2192 ",(0,a.jsx)(n.code,{children:"erDiagram"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"\ufe0f-master-the-fundamentals",children:"\ud83c\udfd7\ufe0f Master the Fundamentals"}),"\n",(0,a.jsx)(n.h3,{id:"layout-direction---changes-everything",children:"Layout Direction - Changes Everything"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart LR\n    A[TD: Top Down<br/>Great for hierarchies] \n    B[LR: Left Right<br/>Best for processes]\n    C[RL: Right Left<br/>Reverse flows] \n    D[BT: Bottom Top<br/>Build-up flows]"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Pro tip:"})," Start with ",(0,a.jsx)(n.code,{children:"LR"})," for most workflows, ",(0,a.jsx)(n.code,{children:"TD"})," for org charts or decision trees."]}),"\n",(0,a.jsx)(n.h3,{id:"node-shapes---visual-language-that-works",children:"Node Shapes - Visual Language That Works"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart LR\n    A[Rectangle: Process step] --\x3e B(Rounded: Start/end state)\n    B --\x3e C{Diamond: Decision point} --\x3e D[[Subroutine: Module]]\n    C --\x3e E[/Parallelogram: Input/] --\x3e F[\\Trapezoid: Output\\]\n    D --\x3e G((Circle: Connection point))"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"When to use what:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"[text]"})," - Any process or action"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"(text)"})," - Start and end points"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"{text}"})," - Decision points, conditions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"[[text]]"})," - Modules, components, subsystems"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"connections-that-communicate",children:"Connections That Communicate"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart LR\n    A --\x3e B\n    B -.-> C\n    C ==> D\n    D --x E\n    \n    A1[Solid arrow: Normal flow] \n    B1[Dotted arrow: Optional/async]\n    C1[Thick arrow: Important path]\n    D1[Arrow with X: Blocked/error]"}),"\n",(0,a.jsx)(n.h2,{id:"-make-it-professional",children:"\ud83c\udfa8 Make It Professional"}),"\n",(0,a.jsx)(n.h3,{id:"smart-styling",children:"Smart Styling"}),"\n",(0,a.jsx)(n.mermaid,{value:"%%{init: {'theme':'base', 'themeVariables': {'primaryColor': '#4f46e5', 'primaryTextColor': '#fff', 'primaryBorderColor': '#3730a3', 'lineColor': '#6b7280'}}}%%\nflowchart LR\n    A[Custom colors] --\x3e B[Professional look]\n    classDef highlight fill:#ef4444,stroke:#dc2626,stroke-width:2px,color:#fff\n    class A highlight"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Available themes:"})," ",(0,a.jsx)(n.code,{children:"base"}),", ",(0,a.jsx)(n.code,{children:"dark"}),", ",(0,a.jsx)(n.code,{children:"forest"}),", ",(0,a.jsx)(n.code,{children:"neutral"})," (themes can be customized site-wide or per diagram)"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Pro styling tips:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"classDef"})," for consistent colors across related nodes"]}),"\n",(0,a.jsx)(n.li,{children:"Match your brand colors with custom theme variables"}),"\n",(0,a.jsx)(n.li,{children:"Keep it simple - too many colors hurt readability"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"subgraphs---organize-complex-systems",children:"Subgraphs - Organize Complex Systems"}),"\n",(0,a.jsx)(n.mermaid,{value:'flowchart TD\n    User[User] --\x3e Frontend\n    \n    subgraph "Frontend Layer"\n        Frontend[React App]\n        Frontend --\x3e Router[React Router]\n    end\n    \n    subgraph "Backend Services"\n        API[REST API]\n        Auth[Auth Service]\n        DB[(Database)]\n    end\n    \n    subgraph "External"\n        Payment[Stripe]\n        Email[SendGrid]\n    end\n    \n    Frontend --\x3e API\n    API --\x3e Auth\n    API --\x3e DB\n    API --\x3e Payment\n    API --\x3e Email'}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Use subgraphs for:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Service boundaries in microservices"}),"\n",(0,a.jsx)(n.li,{children:"Network zones (frontend/backend/external)"}),"\n",(0,a.jsx)(n.li,{children:"Team ownership boundaries"}),"\n",(0,a.jsx)(n.li,{children:"Deployment environments"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-real-world-examples-that-work",children:"\ud83d\udca1 Real-World Examples That Work"}),"\n",(0,a.jsx)(n.h3,{id:"system-architecture",children:"System Architecture"}),"\n",(0,a.jsx)(n.mermaid,{value:'flowchart TD\n    subgraph "Client"\n        Mobile[\ud83d\udcf1 Mobile App]\n        Web[\ud83c\udf10 Web App]\n    end\n    \n    subgraph "API Gateway"\n        Gateway[\ud83d\udeaa Kong Gateway]\n    end\n    \n    subgraph "Services"\n        User[\ud83d\udc64 User Service]\n        Order[\ud83d\uded2 Order Service]  \n        Payment[\ud83d\udcb3 Payment Service]\n    end\n    \n    subgraph "Data"\n        UserDB[(\ud83d\udc64 User DB)]\n        OrderDB[(\ud83d\uded2 Order DB)]\n        Cache[(\u26a1 Redis)]\n    end\n    \n    Mobile --\x3e Gateway\n    Web --\x3e Gateway\n    Gateway --\x3e User\n    Gateway --\x3e Order\n    Gateway --\x3e Payment\n    \n    User --\x3e UserDB\n    Order --\x3e OrderDB\n    Payment --\x3e Cache\n    \n    classDef service fill:#3b82f6,stroke:#1e40af,stroke-width:2px,color:#fff\n    classDef database fill:#10b981,stroke:#047857,stroke-width:2px,color:#fff\n    \n    class User,Order,Payment service\n    class UserDB,OrderDB,Cache database'}),"\n",(0,a.jsx)(n.h3,{id:"api-flow-documentation",children:"API Flow Documentation"}),"\n",(0,a.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant C as Client\n    participant G as API Gateway\n    participant A as Auth Service\n    participant U as User Service\n    participant D as Database\n    \n    C->>G: POST /api/users/login\n    G->>A: Validate credentials\n    A->>D: Check user exists\n    D--\x3e>A: User data\n    A->>A: Generate JWT\n    A--\x3e>G: JWT token\n    G--\x3e>C: 200 OK + token\n    \n    Note over C,G: Token valid for 24h\n    \n    C->>G: GET /api/users/profile<br/>(Authorization: Bearer token)\n    G->>A: Verify token\n    A--\x3e>G: Token valid\n    G->>U: Get user profile\n    U->>D: SELECT user data\n    D--\x3e>U: User profile\n    U--\x3e>G: Profile data\n    G--\x3e>C: 200 OK + profile"}),"\n",(0,a.jsx)(n.h2,{id:"-implementation-guide",children:"\u26a1 Implementation Guide"}),"\n",(0,a.jsx)(n.h3,{id:"githubgitlab-most-common",children:"GitHub/GitLab (Most Common)"}),"\n",(0,a.jsx)(n.p,{children:"Embedded diagrams work out of the box in:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"README.md files"}),"\n",(0,a.jsx)(n.li,{children:"Wiki pages"}),"\n",(0,a.jsx)(n.li,{children:"Issue descriptions and comments"}),"\n",(0,a.jsx)(n.li,{children:"Pull request descriptions"}),"\n",(0,a.jsx)(n.li,{children:"Markdown files in repositories"}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart LR\n    A[Your embedded diagram] --\x3e B[Renders automatically]"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Pro tip:"})," No need to manage image assets or worry about relative paths breaking."]}),"\n",(0,a.jsx)(n.h3,{id:"from-image-files-to-embedded-diagrams",children:"From Image Files to Embedded Diagrams"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Before:"})," Managing separate image files"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markdown",children:"# System Architecture\n![Architecture](./docs/images/architecture.png)\n\n# API Flow  \n![API Flow](./docs/images/api-flow.svg)\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"After:"})," Everything embedded in markdown"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markdown",children:"# System Architecture\n```mermaid\nflowchart TD\n    Frontend --\x3e API\n    API --\x3e Database\n```\n\n# API Flow\n```mermaid\nsequenceDiagram\n    Client->>API: Request\n    API->>DB: Query\n    DB--\x3e>API: Data\n    API--\x3e>Client: Response\n```\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["No ",(0,a.jsx)(n.code,{children:"/docs/images/"})," folder to maintain"]}),"\n",(0,a.jsx)(n.li,{children:"No broken image links when files move"}),"\n",(0,a.jsx)(n.li,{children:"Diagrams update in the same commit as code changes"}),"\n",(0,a.jsx)(n.li,{children:"Searchable text instead of image content"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-where-your-embedded-diagrams-work",children:"\u26a1 Where Your Embedded Diagrams Work"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Platforms with native Mermaid support:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"GitHub/GitLab:"})," READMEs, wikis, issues, pull requests"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Docusaurus:"})," Documentation sites with ",(0,a.jsx)(n.code,{children:"@docusaurus/theme-mermaid"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"GitBook:"})," Native rendering in pages"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Obsidian:"})," Notes and knowledge bases"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"VS Code:"})," With Mermaid Preview extension"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Notion:"})," Mermaid code blocks (limited support)"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"The power:"}),' Write once, renders everywhere. No more "Can you re-export that diagram?" requests.']}),"\n",(0,a.jsx)(n.h2,{id:"-common-gotchas-to-avoid",children:"\ud83d\udea8 Common Gotchas to Avoid"}),"\n",(0,a.jsx)(n.h3,{id:"syntax-errors-that-break-everything",children:"Syntax Errors That Break Everything"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart LR\n    %% DON'T: Special characters without quotes\n    A[User's Data] --\x3e B[Won't work!]\n    \n    %% DO: Use quotes for special characters  \n    C[\"User's Data\"] --\x3e D[\"Works perfectly!\"]"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Watch out for:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Unquoted text with apostrophes, quotes, or special chars"}),"\n",(0,a.jsxs)(n.li,{children:["Missing spaces around arrows (",(0,a.jsx)(n.code,{children:"A--\x3eB"})," should be ",(0,a.jsx)(n.code,{children:"A --\x3e B"}),")"]}),"\n",(0,a.jsx)(n.li,{children:"Inconsistent node IDs (case-sensitive)"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Large diagrams:"})," Break into multiple subgraphs or separate diagrams"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Complex styling:"})," Prefer themes over individual node styling"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Too many connections:"})," Consider simplifying or using different diagram types"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"GitHub:"})," Slightly limited feature set vs. mermaid.live"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Different themes:"})," Test in your target environment"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Mobile rendering:"})," Some complex diagrams don't scale well"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-best-practices-for-teams",children:"\ud83c\udfaf Best Practices for Teams"}),"\n",(0,a.jsx)(n.h2,{id:"-best-practices-for-embedded-diagrams",children:"\ud83c\udfaf Best Practices for Embedded Diagrams"}),"\n",(0,a.jsx)(n.h3,{id:"keep-it-simple-for-readability",children:"Keep It Simple for Readability"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart LR\n    A[Too complex diagrams] --\x3e B[Hard to read in markdown]\n    B --\x3e C[Break into smaller diagrams]\n    C --\x3e D[Each tells one story]"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Rule of thumb:"})," If you need to scroll horizontally to see the whole diagram, it's too complex."]}),"\n",(0,a.jsx)(n.h3,{id:"organize-complex-systems-with-multiple-diagrams",children:"Organize Complex Systems with Multiple Diagrams"}),"\n",(0,a.jsx)(n.p,{children:"Instead of one giant architecture diagram, create focused views:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markdown",children:'## High-Level Architecture\n```mermaid\nflowchart TD\n    Frontend --\x3e Backend\n    Backend --\x3e Database\n```\n\n## Service Details  \n```mermaid\nflowchart LR\n    subgraph "Backend Services"\n        API[REST API]\n        Auth[Auth Service]\n        Payment[Payment Service]\n    end\n```\n\n## Data Flow\n```mermaid\nsequenceDiagram\n    Frontend->>API: Request\n    API->>Database: Query\n    Database--\x3e>API: Data\n    API--\x3e>Frontend: Response\n```\n'})}),"\n",(0,a.jsx)(n.h3,{id:"maintain-consistency",children:"Maintain Consistency"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart TD\n    A[Establish conventions] --\x3e B[Document your standards]\n    B --\x3e C[Review in PRs] --\x3e D[Update with code changes]\n    D --\x3e A\n    \n    classDef process fill:#3b82f6,stroke:#1e40af,stroke-width:2px,color:#fff\n    class A,B,C,D process"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Team conventions to establish:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Standard colors for different system types"}),"\n",(0,a.jsx)(n.li,{children:"Consistent node shapes (rectangles for services, cylinders for databases)"}),"\n",(0,a.jsx)(n.li,{children:"Naming conventions for clarity"}),"\n",(0,a.jsx)(n.li,{children:"When to use subgraphs vs. separate diagrams"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-the-embedded-diagram-advantage",children:"\ud83c\udfc6 The Embedded Diagram Advantage"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Version Control Integration:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Diagrams change with code in the same pull request"}),"\n",(0,a.jsx)(n.li,{children:"Git blame shows who changed architecture and when"}),"\n",(0,a.jsx)(n.li,{children:"Diff views show exactly what changed in your system design"}),"\n",(0,a.jsx)(n.li,{children:'No more "the latest diagram is in someone\'s Google Drive"'}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Always Current Documentation:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"README files with embedded diagrams never show outdated architecture"}),"\n",(0,a.jsx)(n.li,{children:"API documentation stays in sync with actual endpoints"}),"\n",(0,a.jsx)(n.li,{children:"System diagrams update as services evolve"}),"\n",(0,a.jsx)(n.li,{children:'No more "ignore that diagram, it\'s from 6 months ago"'}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Better Developer Experience:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"New team members see current system state immediately"}),"\n",(0,a.jsx)(n.li,{children:"Code reviews include architectural changes"}),"\n",(0,a.jsx)(n.li,{children:"Issues and PRs can include relevant diagrams inline"}),"\n",(0,a.jsx)(n.li,{children:"Search works across diagram content, not just filenames"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-advanced-patterns",children:"\ud83d\udd25 Advanced Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"clickable-interactive-diagrams",children:"Clickable Interactive Diagrams"}),"\n",(0,a.jsx)(n.mermaid,{value:'flowchart LR\n    A[API Gateway] --\x3e B[User Service]\n    B --\x3e C[Documentation]\n    \n    click A "https://kong.com" "API Gateway docs"\n    click B "https://github.com/team/user-service" "User service repo"\n    click C "https://docs.team.com/user-api" "API documentation"'}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Works in:"})," GitHub, Docusaurus, most documentation platforms"]}),"\n",(0,a.jsx)(n.h3,{id:"dynamic-content-generation",children:"Dynamic Content Generation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Generate Mermaid from your API schema\nfunction generateERDiagram(schema) {\n  let diagram = 'erDiagram\\n';\n  \n  schema.tables.forEach(table => {\n    diagram += `  ${table.name} {\\n`;\n    table.columns.forEach(col => {\n      diagram += `    ${col.type} ${col.name}\\n`;\n    });\n    diagram += '  }\\n';\n  });\n  \n  return diagram;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"integration-with-documentation-generation",children:"Integration with Documentation Generation"}),"\n",(0,a.jsx)(n.p,{children:"Many teams auto-generate Mermaid diagrams from:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"OpenAPI specs \u2192 sequence diagrams"}),"\n",(0,a.jsx)(n.li,{children:"Database schemas \u2192 entity relationship diagrams"}),"\n",(0,a.jsx)(n.li,{children:"Code structure \u2192 class diagrams"}),"\n",(0,a.jsx)(n.li,{children:"Deployment configs \u2192 architecture diagrams"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-action-steps",children:"\ud83c\udfaf Action Steps"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Today:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Find one image diagram in your current documentation"}),"\n",(0,a.jsxs)(n.li,{children:["Recreate it as embedded Mermaid using ",(0,a.jsx)(n.a,{href:"https://mermaid.live",children:"mermaid.live"})]}),"\n",(0,a.jsxs)(n.li,{children:["Replace the ",(0,a.jsx)(n.code,{children:"![image](path)"})," with the Mermaid code block"]}),"\n",(0,a.jsx)(n.li,{children:"Commit and see it render in your repository"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"This week:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Convert your main README architecture diagram"}),"\n",(0,a.jsx)(n.li,{children:"Add embedded diagrams to your API documentation"}),"\n",(0,a.jsx)(n.li,{children:"Replace process flow images with Mermaid flowcharts"}),"\n",(0,a.jsx)(n.li,{children:"Update your team's documentation standards"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"This month:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Establish team conventions for embedded diagram patterns"}),"\n",(0,a.jsx)(n.li,{children:"Add diagram reviews to your pull request process"}),"\n",(0,a.jsx)(n.li,{children:"Create templates for common diagram types"}),"\n",(0,a.jsx)(n.li,{children:"Audit and convert remaining static diagrams"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Long term:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Embedded diagrams become part of your definition of done"}),"\n",(0,a.jsx)(n.li,{children:"Architecture decisions include diagram updates"}),"\n",(0,a.jsx)(n.li,{children:"New services automatically get documented with embedded diagrams"}),"\n",(0,a.jsx)(n.li,{children:"Your documentation stays current without manual maintenance"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-success-metrics",children:"\ud83c\udfc6 Success Metrics"}),"\n",(0,a.jsx)(n.p,{children:"You'll know Mermaid is working when:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Your diagrams are always up-to-date"}),"\n",(0,a.jsx)(n.li,{children:"New team members understand systems faster"}),"\n",(0,a.jsx)(n.li,{children:"Architecture discussions reference living diagrams"}),"\n",(0,a.jsx)(n.li,{children:"Code reviews include diagram updates"}),"\n",(0,a.jsx)(n.li,{children:'You never hear "where\'s the latest architecture diagram?"'}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Ready to embed your first diagram?"})," Copy any Mermaid example above directly into your markdown file and watch it render as a live, interactive diagram. No more managing image files or dealing with broken links \u2013 just text that becomes beautiful, current documentation."]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);